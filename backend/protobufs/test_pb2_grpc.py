# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import responses_pb2 as responses__pb2
import test_pb2 as test__pb2


class TestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartTest = channel.unary_unary(
                '/TestService/StartTest',
                request_serializer=test__pb2.StartTestRequest.SerializeToString,
                response_deserializer=responses__pb2.StatusOk.FromString,
                )
        self.StopTest = channel.unary_unary(
                '/TestService/StopTest',
                request_serializer=test__pb2.StopTestRequest.SerializeToString,
                response_deserializer=responses__pb2.StatusOk.FromString,
                )


class TestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartTest': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTest,
                    request_deserializer=test__pb2.StartTestRequest.FromString,
                    response_serializer=responses__pb2.StatusOk.SerializeToString,
            ),
            'StopTest': grpc.unary_unary_rpc_method_handler(
                    servicer.StopTest,
                    request_deserializer=test__pb2.StopTestRequest.FromString,
                    response_serializer=responses__pb2.StatusOk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/StartTest',
            test__pb2.StartTestRequest.SerializeToString,
            responses__pb2.StatusOk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/StopTest',
            test__pb2.StopTestRequest.SerializeToString,
            responses__pb2.StatusOk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ClientStreamTestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ModifyTest = channel.stream_unary(
                '/ClientStreamTestService/ModifyTest',
                request_serializer=test__pb2.ModifyTestRequest.SerializeToString,
                response_deserializer=responses__pb2.StatusOk.FromString,
                )


class ClientStreamTestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ModifyTest(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientStreamTestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ModifyTest': grpc.stream_unary_rpc_method_handler(
                    servicer.ModifyTest,
                    request_deserializer=test__pb2.ModifyTestRequest.FromString,
                    response_serializer=responses__pb2.StatusOk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ClientStreamTestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientStreamTestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ModifyTest(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/ClientStreamTestService/ModifyTest',
            test__pb2.ModifyTestRequest.SerializeToString,
            responses__pb2.StatusOk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
